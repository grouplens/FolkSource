<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>
    <constant name="struts.enable.SlashesInActionNames" value="true"/>
    <constant name="struts.mapper.alwaysSelectFullNamespace" value="false"/>
    <constant name="struts.patternMatcher" value="regex" />
        
    <constant name="struts.convention.action.suffix" value="Controller"/>
    <constant name="struts.convention.action.mapAllMatches" value="true"/>
    <constant name="struts.convention.default.parent.package" value="citizen-sense"/>
    <constant name="struts.convention.package.locators" value="api,oauth,account"/>
    <constant name="struts.convention.package.locators.basePackage" value="org.grouplens.bl.controller"/>
    <constant name="struts.convention.result.path" value="/jsp/"/>
        
    
    <package name="citizen-s" extends="struts-default">
        <!-- 
        <result-types>
            <result-type name="exceptionResult" class="org.grouplens.bl.struts.result.ExceptionResult" />
            <result-type name="ambiguousResult" class="org.grouplens.bl.struts.result.AmbiguousIdResult" />
            <result-type name="modelDrivenDto" class="org.grouplens.bl.struts.result.ModelDrivenDtoResult" />
        </result-types>
        -->
        
        <interceptors>
        	<!--
            <interceptor name="contentParser" class="org.grouplens.bl.struts.interceptor.ContentParsingInterceptor" />
            <interceptor name="exceptionLog" class="org.grouplens.bl.struts.interceptor.ExceptionLoggingInterceptor" />
            <interceptor name="authentication" class="org.grouplens.bl.struts.interceptor.AuthenticationInterceptor" />
            <interceptor name="authorization" class="org.grouplens.bl.struts.interceptor.AuthorizationInterceptor" />
            <interceptor name="hibernate" class="org.grouplens.bl.struts.interceptor.HibernateInterceptor" />
            <interceptor name="resolver" class="org.grouplens.bl.struts.interceptor.ModelResolverInterceptor">
                <param name="enableOauth">${user.oauth.enable}</param>
            </interceptor>
            <interceptor name="concurrentReplayer" class="org.grouplens.bl.struts.interceptor.ConcurrentReplayInterceptor"/>
            <interceptor name="actionConfigSupport" class="org.grouplens.bl.struts.interceptor.ActionConfigCloningInterceptor"/>
            -->
            
            <interceptor-stack name="cs">
                <interceptor-ref name="struts-base" />
                
                <!-- Content parsing goes before concurrent replay since we can only stream input once. -->
               <!--  <interceptor-ref name="contentParser" />             
                             
                <interceptor-ref name="concurrentReplayer" />
                             
                <interceptor-ref name="hibernate" />
                
                <interceptor-ref name="exceptionLog" />
                <interceptor-ref name="authentication" />
                <interceptor-ref name="authorization" />
                
                <interceptor-ref name="resolver" /> -->
            </interceptor-stack>
        </interceptors>
        
        <default-interceptor-ref name="cs"/>
        
        <global-results>
            <!-- The following results, excluding 'replay' and 'ambiguous', match the definitions
                 in the GlobalResult enum. -->
            <result name="ok" type="modelDrivenDto">
                <param name="status">200</param>
            </result>
            <result name="created" type="modelDrivenDto">
                <param name="status">201</param>
            </result>
            
            <result name="bad_request" type="exceptionResult">
                <param name="error">400</param>
            </result>
            <result name="unauthorized" type="exceptionResult">
                <param name="error">401</param>
            </result>
            <result name="forbidden" type="exceptionResult">
                <param name="error">403</param>
            </result>
            <result name="not_found" type="exceptionResult">
                <param name="error">404</param>
            </result>
            <result name="method_not_allowed" type="exceptionResult">
                <param name="error">405</param>
            </result>
            <result name="conflict" type="exceptionResult">
                <param name="error">409></param>
            </result>
            <result name="error" type="exceptionResult">
                <param name="error">500</param>
            </result>
        </global-results>
        
        <global-exception-mappings>
            <exception-mapping exception="java.lang.Throwable" result="error"/>

             <!-- These mapping names are somewhat confusing, but the http spec likes to interchange
                  authorize and authenticate, where we have a distinction. -->
            <exception-mapping exception="org.grouplens.bl.UnauthorizedException" result="forbidden"/>
            <exception-mapping exception="org.grouplens.bl.InvalidMetaIdException" result="forbidden"/>
            <exception-mapping exception="org.grouplens.bl.AuthenticationException" result="unauthorized"/>
            
            <exception-mapping exception="org.grouplens.bl.AmbiguousIdException" result="ambiguous"/>
            <exception-mapping exception="org.grouplens.bl.InvalidIdException" result="not_found"/>
            <exception-mapping exception="org.grouplens.bl.ValidationException" result="bad_request"/>
            <exception-mapping exception="org.grouplens.common.dto.ParseException" result="bad_request"/>
        </global-exception-mappings>

    </package>
    
    <package name="booklens-auth" extends="booklens">
        <interceptors>
            <!-- booklens specific interceptors -->
            <interceptor name="tempTokenAuthentication" class="org.grouplens.bl.struts.interceptor.TemporaryTokenAuthenticationInterceptor" />
            <interceptor name="noTokenAuthentication" class="org.grouplens.bl.struts.interceptor.NoTokenAuthenticationInterceptor" />
            <interceptor name="userAware" class="org.grouplens.bl.struts.interceptor.UserAwareInterceptor" />
            
            <interceptor-stack name="bl-auth">
                <interceptor-ref name="struts-base" />
                
                <interceptor-ref name="hibernate" />
                <interceptor-ref name="exceptionLog" />
            </interceptor-stack>
        </interceptors>
        
        <default-interceptor-ref name="bl-auth"/>
    </package>
    
    <package name="booklens-account" extends="booklens">
        <interceptors>
            <interceptor name="requiresUser" class="org.grouplens.bl.struts.interceptor.UserRequiredInterceptor" />
            <interceptor name="userAware" class="org.grouplens.bl.struts.interceptor.UserAwareInterceptor" />
            
            <interceptor-stack name="bl-account">
                <interceptor-ref name="struts-base" />
                <interceptor-ref name="hibernate" />
                <interceptor-ref name="requiresUser" />
                <interceptor-ref name="userAware" />
                <interceptor-ref name="exceptionLog" />
            </interceptor-stack>
        </interceptors>
        
        <default-interceptor-ref name="bl-account"/>
        
        <global-results>
            <result name="login" type="redirect">
                <param name="location">/account/login</param>
                <param name="parse">true</param>
                <param name="forward">${loginForward}</param>
            </result>
        </global-results>
    </package>
</struts>