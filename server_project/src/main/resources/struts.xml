<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>

	<bean name="myJson" type="org.apache.struts2.rest.handler.ContentTypeHandler" class="org.folksource.struts.JsonDtoContentTypeHandler" />

	<constant name="struts.rest.handlerOverride.json" value="myJson" />

	<constant name="struts.enable.SlashesInActionNames" value="true" />
	<constant name="struts.mapper.alwaysSelectFullNamespace"
		value="false" />
	<constant name="struts.mapper.class" value="rest" />
	<constant name="struts.patternMatcher" value="regex" />

	<constant name="struts.convention.action.suffix" value="Controller" />
	<constant name="struts.convention.action.mapAllMatches" value="true" />
	<constant name="struts.convention.default.parent.package"
		value="folksource" />
	<constant name="struts.convention.package.locators" value="controller" />
	<constant name="struts.convention.package.locators.basePackage"
		value="org.folksource" />
	<constant name="struts.convention.result.path" value="/jsp/" />
	<constant name="struts.rest.content.restrictToGET" value="false" />
	<constant name="struts.rest.namespace" value=""/> 
	<constant name="struts.multipart.saveDir" value="tmp" />
	<constant name="struts.multipart.maxSize" value="5368709120" />

	<package name="folksource" extends="rest-default">
		<!-- <result-types> <result-type name="exceptionResult" class="org.grouplens.bl.struts.result.ExceptionResult" 
			/> <result-type name="ambiguousResult" class="org.grouplens.bl.struts.result.AmbiguousIdResult" 
			/> <result-type name="modelDrivenDto" class="org.grouplens.bl.struts.result.ModelDrivenDtoResult" 
			/> </result-types> -->

		<interceptors>
			<!-- <interceptor name="contentParser" class="org.grouplens.bl.struts.interceptor.ContentParsingInterceptor" 
				/> <interceptor name="exceptionLog" class="org.grouplens.bl.struts.interceptor.ExceptionLoggingInterceptor" 
				/> <interceptor name="authentication" class="org.grouplens.bl.struts.interceptor.AuthenticationInterceptor" 
				/> <interceptor name="authorization" class="org.grouplens.bl.struts.interceptor.AuthorizationInterceptor" 
				/> -->
				<interceptor name="hibernate" class="org.folksource.struts.HibInterceptor" /> 
<!-- 				<interceptor name="authorization" class="org.folksource.struts.AuthInterceptor" />  -->
				<!--  <interceptor name="resolver" class="org.grouplens.bl.struts.interceptor.ModelResolverInterceptor"> 
				<param name="enableOauth">${user.oauth.enable}</param> </interceptor> <interceptor 
				name="concurrentReplayer" class="org.grouplens.bl.struts.interceptor.ConcurrentReplayInterceptor"/> 
				<interceptor name="actionConfigSupport" class="org.grouplens.bl.struts.interceptor.ActionConfigCloningInterceptor"/> -->

			<interceptor-stack name="fs">
				<interceptor-ref name="restDefaultStack" />

				<!-- Content parsing goes before concurrent replay since we can only 
					stream input once. -->
				<!-- <interceptor-ref name="contentParser" /> <interceptor-ref name="concurrentReplayer" 
					/> --> 
					<interceptor-ref name="servletConfig" />
<!-- 					<interceptor-ref name="authorization"> -->
<!-- 						<param name="excludeMethods">create,update,show,index,options</param> -->
<!-- 					</interceptor-ref> -->
					<interceptor-ref name="hibernate" /> <!-- <interceptor-ref name="exceptionLog" 
					/> <interceptor-ref name="authentication" /> <interceptor-ref name="authorization" 
					/> <interceptor-ref name="resolver" /> -->
			</interceptor-stack>
		</interceptors>

		<default-interceptor-ref name="fs" />

		<global-results>
			<result name="login_success" >/login_success.jsp</result>
			<result name = "login_fail" type="httpheader">
				<param name="status">401</param>
			</result>
			<result name="login_wrong_password" >/login_password_fail.jsp</result>
			<result name="login_no_user" >/login_fail.jsp</result>
			<result name="register_success">/register_success.jsp</result>
			<result name="register_fail">/register_fail.jsp</result>

			<result name="send_email_success">/send_email_success.jsp</result>
			<result name="send_email_fail">/send_email_fail.jsp</result>
			<result name="email_not_exist">/email_not_exist.jsp</result>
	
	
			<result name="password_not_match">/password_not_match.jsp</result>
			<result name="findpwid_not_exist">/findpwid_not_exist.jsp</result>
			<result name="findpw_link_expired">/findpw_link_expired.jsp</result>
			<result name="reset_password_success">/reset_password_success.jsp</result>
			
			<result name="image_upload_success">/image_upload_success.jsp</result>
			<result name="image_upload_fail">/image_upload_fail.jsp</result>
			
			<result name="post_submission_success">/post_submission_success.jsp</result>
			<result name="post_submission_fail">/post_submission_fail.jsp</result>
			
			<result name="options_success">/options_success.jsp</result>
			<!-- The following results, excluding 'replay' and 'ambiguous', match 
				the definitions in the GlobalResult enum. -->
			<!-- <result name="ok" type="modelDrivenDto"> <param name="status">200</param> 
				</result> <result name="created" type="modelDrivenDto"> <param name="status">201</param> 
				</result> <result name="bad_request" type="exceptionResult"> <param name="error">400</param> 
				</result> <result name="unauthorized" type="exceptionResult"> <param name="error">401</param> 
				</result> <result name="forbidden" type="exceptionResult"> <param name="error">403</param> 
				</result> <result name="not_found" type="exceptionResult"> <param name="error">404</param> 
				</result> <result name="method_not_allowed" type="exceptionResult"> <param 
				name="error">405</param> </result> <result name="conflict" type="exceptionResult"> 
				<param name="error">409></param> </result> <result name="error" type="exceptionResult"> 
				<param name="error">500</param> </result> -->
		</global-results>

		<!-- <global-exception-mappings> <exception-mapping exception="java.lang.Throwable" 
			result="error"/> -->
		<!-- These mapping names are somewhat confusing, but the http spec likes 
			to interchange authorize and authenticate, where we have a distinction. -->
		<!-- <exception-mapping exception="org.grouplens.bl.UnauthorizedException" 
			result="forbidden"/> <exception-mapping exception="org.grouplens.bl.InvalidMetaIdException" 
			result="forbidden"/> <exception-mapping exception="org.grouplens.bl.AuthenticationException" 
			result="unauthorized"/> <exception-mapping exception="org.grouplens.bl.AmbiguousIdException" 
			result="ambiguous"/> <exception-mapping exception="org.grouplens.bl.InvalidIdException" 
			result="not_found"/> <exception-mapping exception="org.grouplens.bl.ValidationException" 
			result="bad_request"/> <exception-mapping exception="org.grouplens.common.dto.ParseException" 
			result="bad_request"/> </global-exception-mappings> -->

	</package>



</struts>